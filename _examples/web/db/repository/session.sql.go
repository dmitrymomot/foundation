// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const DeleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions
WHERE expires_at <= CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, DeleteExpiredSessions)
	return err
}

const DeleteSessionByID = `-- name: DeleteSessionByID :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSessionByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteSessionByID, id)
	return err
}

const GetSessionByID = `-- name: GetSessionByID :one
SELECT id, token, fingerprint, ip_address, user_agent, user_id, data, expires_at, created_at, updated_at FROM sessions
WHERE id = $1
  AND expires_at > CURRENT_TIMESTAMP
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, GetSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Fingerprint,
		&i.IpAddress,
		&i.UserAgent,
		&i.UserID,
		&i.Data,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetSessionByToken = `-- name: GetSessionByToken :one
SELECT id, token, fingerprint, ip_address, user_agent, user_id, data, expires_at, created_at, updated_at FROM sessions
WHERE token = $1
  AND expires_at > CURRENT_TIMESTAMP
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, GetSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Fingerprint,
		&i.IpAddress,
		&i.UserAgent,
		&i.UserID,
		&i.Data,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpsertSession = `-- name: UpsertSession :one
INSERT INTO sessions (id, token, fingerprint, ip_address, user_agent, user_id, data, expires_at, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
ON CONFLICT (id) DO UPDATE
SET token = EXCLUDED.token,
    fingerprint = EXCLUDED.fingerprint,
    ip_address = EXCLUDED.ip_address,
    user_agent = EXCLUDED.user_agent,
    user_id = EXCLUDED.user_id,
    data = EXCLUDED.data,
    expires_at = EXCLUDED.expires_at,
    updated_at = EXCLUDED.updated_at
RETURNING id, token, fingerprint, ip_address, user_agent, user_id, data, expires_at, created_at, updated_at
`

type UpsertSessionParams struct {
	ID          uuid.UUID  `json:"id"`
	Token       string     `json:"token"`
	Fingerprint string     `json:"fingerprint"`
	IpAddress   string     `json:"ip_address"`
	UserAgent   *string    `json:"user_agent"`
	UserID      *uuid.UUID `json:"user_id"`
	Data        []byte     `json:"data"`
	ExpiresAt   time.Time  `json:"expires_at"`
	CreatedAt   time.Time  `json:"created_at"`
	UpdatedAt   time.Time  `json:"updated_at"`
}

func (q *Queries) UpsertSession(ctx context.Context, arg UpsertSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, UpsertSession,
		arg.ID,
		arg.Token,
		arg.Fingerprint,
		arg.IpAddress,
		arg.UserAgent,
		arg.UserID,
		arg.Data,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Fingerprint,
		&i.IpAddress,
		&i.UserAgent,
		&i.UserID,
		&i.Data,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
